	TaskList : 

	Passer de Voronoi au Polygone :
--> Voronoi sort des edges. 
S1 
--> j'ajoute les edges manquants pour créer mes polygones. 
--> Je selectionne les edges définissant un player. 
--> Je cree une liste de vertex à partir de ces edges
--> J'ordonne la liste de vertex
--> Je convertis ma liste de vertex en polygone
S2 
--> j'ajoute les edges manquants pour créer mes polygones. 
--> Je selectionne les edges définissant un player. 
--> Je récupère tous les vertex d'une zone. 
--> J'ordonne la liste de vertex
--> je triangule par rapport à ce centre. 
--> J'ai ainsi converis en polygones.
S3 
--> Je Récupère tous les vertex d'un site
	--> SI je peut boucle mon polygone c'est finit. 
--> Je récupère tous les points manquants. 
--> Je trie les points
--> je construit le polygone


	-- Clean: 
--> do real singleton for SplitScreenManager
--> handle Command buffer more effectivly (Image effect).
--> Dynamic material allocation. 
	-- Todo
--> Effect sur VoronoïEdges.(séparation ecran)
--> Coder un Voronoï simplifié.
--> Coder un constructeur de mesh simplifié.
--> Repalce Vector3 by vector2 where needed.
--> Recoder le calcul des centre des player à l'écran pour ne pas passer par les poly.
--> Check minimal bounding box algorithme.


	Voronoi avec plusieurs targets : 
E0 : Imaginons 4 target dont 2 groupe de 1 et une groupe de 2.
E1 : Une des target seule se rapproche des 2 cibles. Un merge s'opère. 
E2 : Il ya mainenant un groupe de 3 et un groupe de 1.
E3 : Le groupe de 3 se scinde. Il y aura 1 groupe de 2 et 1 groupe de 1 .
E3* : Le groupe de 3 se scinde en 3 à la meme frame.

E0 : J'ai 3 camera. 
	--> C0 est positionnée au milieu de 2 joueurs. 
		--> Soit elle est liée à une zones voronoï qui a pour centre le centre de ses joueurs. (risque de faire une cassure dans cas limite)
			--> Soit centre de cette camera est :Moyenne des centre des player + offset de ce centre .
		--> Soit elle est liée à 2 zones voronoï qui dessinent toutes les 2 sur la camera. 	
			--> Soit centre de cette camera est :Moyenne des centre des player + Moyenne des voronoï offset des players.
		
	--> C1 et C2 sont centrée par rapport à un offset de leur players.
E1 : Merge de 2 groupe : G0( 2 joueurs) et G1 (1 joueur)
	--> Sur les 2 Camera, une va disparaître. 
	--> La camera qui trigger l'event est evidemment bien placée et demande à ce qu'on détruise l'autre
	--> La nouvella camera aura donc 3 targets. 
E2 : J'ai 2 camera.
	--> Similaire à E0
E3 : Split de E0 composé de 3 joueurs. En 1 groupe de 2 et un groupe de 1
	--> Il va falloir instancier une nouvelle camera (C1) pour le joueur qui pars.
	--> C0 va se recentrer sur les 2 joueur restant (j'ai du mal a visualiser cela ca créer un break ?!
	--> C1 va devoir se centrer par rapport au calcul Voronoï du nouveau joueur.




	La notion de groupe : 
--> un groupe est composé de : 
	--> 1 camera. 
	--> Plusieurs players. 


	La structure Camera target : 
--> Une camera a un indice
--> elle a des cibles.
--> elle a un centre. 
--> Cela correspond à pls voronoi region.

	Problématique particulière du split : 
--> 2 camera doivent se replacer. 
--> Je dois calculer les nouveaux offset des camera ( pour cela les camera doivent 
avoir les bonnes targets.)



--> Groupe 3 lorsqu'un s'écarte mon evennement split peut être déclenché par l'un des 2 autres (PB)






















			Nouvelle solution  : 

	I réoganiser pour faciliter les test : 
--> Calcul des points Voronoi sur l'écran . 
--> Calcul des centres Voronoi sur l'écran. 
--> Pourvoir centrer la camera sur les points voronoi ou les centres voronoi. 
--> pouvoir centrer la camera sur la moyenne des targets ou une seule. 

	Comprendre : 
--> Existe-t-il une distance / dead zone à partir de laquelle on peut décider de merge / faire varier cette dead zone. 


--> Comment gérer fusion/split ? 
	I positionnement camera : 
		--> Quel est l'offset de la camera par rapport à sa cible ? 
		--> Quel est la position à l'écran d'une cible ? 
	II Evenement de merge / split. 
		--> A quel moment je dois lancer un merge. 
		--> A quel moment je dois lancer un split. 

	I positionnement de la camera. 
		--> position à l'écran d'une cible.
			--> Si j'utilise les centres Voronoi alors ce ne sera pas réel : 
				--> Split/merge Cassure. 
			--> Si j'utilise les position voronoi alors on est centré comme de la merde. 
				--> Split merge incohérent et difficile ( la distance en voronoi n'est pas représentative de la distance que 
				doivent avoir les joueurs à l'écran.



	II Merge / split : 
			Actuellement : 
			--> j'utilise la différence entre la distance Voronoi des player par rapport à 
			la distance reelle entre les player.
				--> la distance voronoi convertie en distance monde ( la  différence entre 2 position occupée à l'écran).
			--> Si la distance monde est inférieur à la distance ecran alors il faut merge.
			--> Problème une fois 3 joueur atteint il devient quasi impossible de merge car la distance screen devient ridiculement petite.
			Alternative : 
			--> Lorsque 2 player sont dans la deadZone d'une camera alors il faut merge/split
				--> problème a + de deux player la dead zone d'une camera ne représente pas ce qu'elle va filmer
				a l'écran. donc on peut ne plus être a l'écran alors que la camera croit nous filmer
				--> problème Merge / Slit cassure.
			
			Alternative : 
			--> Lorsque les 2 camera atteignent des position presque identique alors il faut merge. 
				--> Pourquoi pas mais prblème est en fait : Comment bien positionner les camera.





	La solution efficace à 2 players : 
--> On utilise les Voronoi points comme position a l'écran pour afficher le joueur. 
	--> Pas centré sur les voronoi regions mais c'est ok. 
--> lorsqu'on est très proche. Les bounds correspondent à la forme de l'écran
ainsi pas de Cassure en split/merge. 

--> On peut choisir de split merge soit :
	--> Lorsqu'on rentre dans une deadZone. 
	--> lorsque la position des joueur à l'écran est inférieur à la distance Voronoi. 

	Pourquoi cette solution n'est plus efficace à n players : 
--> Lorsque 2 player sont proche il n'y a pas de correspondance entre les bounds Voronoi
et l'écran. Ainsi cassure/split.





















	Idée vague : 
--> je peux utiliser les voronoi points pour définir la distance entre les joueur 
diviser par les voronoiBounds.
La distance entre 2 points me donne l'écartement en ratio des joueurs.

--> On voit dans la video que la différence entre bien merge et mal merge
est principalement dans l'axe des camera. 
	--> la ligne de player à player n'est pas dans le meme angle
	que la ligne de camera à camera.




Idée projeter les camera sur les ligne player to player. (semble coherent à 2 joueurs)

En gros : Si je dessine une ligne de player à player alors la camera devrait être dessus. 
	--> ca semble marcher à 2 player peut être que ça marche pour n players. 
Pour plus de 2 joueurs ... 
	--> je dois plutot me projeter du centre imaginé d'un player à soit un autre centre imaginé soit un player. 
Il reste 2 problématiques : 
	--> Je lerp de la ou il faut merge  à + 5mètres.

Autre problème pour N players : Lorsque 2 joueurs se rapprochent en triangle d'un troisième 
	--> Aller sur une ligne ne semble pas marcher.
Meme sans prendre cela en compte : 
lorsque je merge 2 players alors qu'on est nombreux. 
	--> alors la camera n'est pas du tout sur une ligne entre les 2 players. 

Nouvelle idée : 
	--> Je remarque le problème car la camera finale entre les 2 joueurs n'est pas placée ainsi. 
	--> Ne devrais-je pas simplement lerp les camera de là ou elle sont à la ou l'unique camera mergée sera ? 
Problème : 
	--> technique comment faire du multiLerp ? 
	--> Autre : Comment décider/ savoir s'il faut Split / merge.

Actuellement cela ne marchera que pour 2 player car je ne prends pas en compte
le fait qu'il faut faire la vrai distance en fonction du centre au sol de ce que vise la camera.

	







Qu'est-ce qui se passe entre Pour décider d'un spliut / merge ? 


On va parcourir toutes les ScreenPos des target.
	On calcule la screenDist
	On calcule la realDist 
Mais tout cela est accès pour une seule target. 













